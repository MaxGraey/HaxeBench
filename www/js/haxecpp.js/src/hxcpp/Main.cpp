// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_hxcpp_Main
#include <hxcpp/Main.h>
#endif
#ifndef INCLUDED_hxcpp_ScreenPressor
#include <hxcpp/ScreenPressor.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_09786b87c493a67f_31_main,"hxcpp.Main","main",0x60671053,"hxcpp.Main.main","hxcpp/Main.hx",31,0xf0e58ac9)
HX_LOCAL_STACK_FRAME(_hx_pos_09786b87c493a67f_35_DecompressI,"hxcpp.Main","DecompressI",0x456eedcc,"hxcpp.Main.DecompressI","hxcpp/Main.hx",35,0xf0e58ac9)

#include <emscripten/bind.h>
using namespace emscripten;

EMSCRIPTEN_BINDINGS(my_module) {
        class_<hxcpp::Main>("MyWrapper")
        .class_function("decompress", &hxcpp::Main_obj::DecompressI);
}

namespace hxcpp{

void Main_obj::__construct() { }

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1135376c;
}

 ::hxcpp::ScreenPressor Main_obj::SP;

void Main_obj::main(){
            	HX_STACKFRAME(&_hx_pos_09786b87c493a67f_31_main)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))

void Main_obj::DecompressI(int width,int height, ::haxe::io::ArrayBufferViewImpl src, ::haxe::io::ArrayBufferViewImpl dst){
            	HX_GC_STACKFRAME(&_hx_pos_09786b87c493a67f_35_DecompressI)
HXLINE(  36)		 ::hxcpp::ScreenPressor _hx_tmp;
HXDLIN(  36)		if (hx::IsNull( ::hxcpp::Main_obj::SP )) {
HXLINE(  36)			_hx_tmp =  ::hxcpp::ScreenPressor_obj::__alloc( HX_CTX ,width,height);
            		}
            		else {
HXLINE(  36)			_hx_tmp = ::hxcpp::Main_obj::SP;
            		}
HXDLIN(  36)		::hxcpp::Main_obj::SP = _hx_tmp;
HXLINE(  37)		::hxcpp::Main_obj::SP->DecompressI(src,dst);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Main_obj,DecompressI,(void))


Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"SP") ) { outValue = ( SP ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"DecompressI") ) { outValue = DecompressI_dyn(); return true; }
	}
	return false;
}

bool Main_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"SP") ) { SP=ioValue.Cast<  ::hxcpp::ScreenPressor >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Main_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::hxcpp::ScreenPressor*/ ,(void *) &Main_obj::SP,HX_HCSTRING("SP","\x9d","\x48","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Main_obj::SP,"SP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Main_obj::SP,"SP");
};

#endif

hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_HCSTRING("SP","\x9d","\x48","\x00","\x00"),
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	HX_HCSTRING("DecompressI","\xa6","\x2e","\x15","\xdc"),
	::String(null())
};

void Main_obj::__register()
{
	hx::Object *dummy = new Main_obj;
	Main_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hxcpp.Main","\x94","\x7e","\xe6","\xc6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &Main_obj::__SetStatic;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxcpp
